/* eslint-disable @typescript-eslint/explicit-function-return-type */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * TodoApi
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type { ErrorType } from "../../demoHttpClient";
import { demoHttpClient } from "../../demoHttpClient";
import type { Error, Todo, TodoRegisterble, TodoUpdatable } from ".././model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

/**
 * get todos
 */
export const getTodos = (options?: SecondParameter<typeof demoHttpClient>, signal?: AbortSignal) => {
  return demoHttpClient<Todo[]>({ url: `/todos`, method: "get", signal }, options);
};

export const getGetTodosQueryKey = () => [`/todos`] as const;

export const getGetTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = ErrorType<Error>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>;
  request?: SecondParameter<typeof demoHttpClient>;
}): UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({ signal }) => getTodos(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>;
export type GetTodosQueryError = ErrorType<Error>;

export const useGetTodos = <TData = Awaited<ReturnType<typeof getTodos>>, TError = ErrorType<Error>>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>;
  request?: SecondParameter<typeof demoHttpClient>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTodosQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * register todo
 */
export const registerTodo = (todoRegisterble: TodoRegisterble, options?: SecondParameter<typeof demoHttpClient>) => {
  return demoHttpClient<Todo>(
    { url: `/todo`, method: "post", headers: { "Content-Type": "application/json" }, data: todoRegisterble },
    options
  );
};

export const getRegisterTodoMutationOptions = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof registerTodo>>, TError, { data: TodoRegisterble }, TContext>;
  request?: SecondParameter<typeof demoHttpClient>;
}): UseMutationOptions<Awaited<ReturnType<typeof registerTodo>>, TError, { data: TodoRegisterble }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerTodo>>, { data: TodoRegisterble }> = (props) => {
    const { data } = props ?? {};

    return registerTodo(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterTodoMutationResult = NonNullable<Awaited<ReturnType<typeof registerTodo>>>;
export type RegisterTodoMutationBody = TodoRegisterble;
export type RegisterTodoMutationError = ErrorType<Error>;

export const useRegisterTodo = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof registerTodo>>, TError, { data: TodoRegisterble }, TContext>;
  request?: SecondParameter<typeof demoHttpClient>;
}) => {
  const mutationOptions = getRegisterTodoMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * get todo
 */
export const getTodo = (todoId: number, options?: SecondParameter<typeof demoHttpClient>, signal?: AbortSignal) => {
  return demoHttpClient<Todo>({ url: `/todo/${todoId}`, method: "get", signal }, options);
};

export const getGetTodoQueryKey = (todoId: number) => [`/todo/${todoId}`] as const;

export const getGetTodoQueryOptions = <TData = Awaited<ReturnType<typeof getTodo>>, TError = ErrorType<Error>>(
  todoId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>;
    request?: SecondParameter<typeof demoHttpClient>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodoQueryKey(todoId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodo>>> = ({ signal }) =>
    getTodo(todoId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!todoId, ...queryOptions };
};

export type GetTodoQueryResult = NonNullable<Awaited<ReturnType<typeof getTodo>>>;
export type GetTodoQueryError = ErrorType<Error>;

export const useGetTodo = <TData = Awaited<ReturnType<typeof getTodo>>, TError = ErrorType<Error>>(
  todoId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>;
    request?: SecondParameter<typeof demoHttpClient>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTodoQueryOptions(todoId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * update todo
 */
export const updateTodo = (
  todoId: number,
  todoUpdatable: TodoUpdatable,
  options?: SecondParameter<typeof demoHttpClient>
) => {
  return demoHttpClient<Todo>(
    { url: `/todo/${todoId}`, method: "put", headers: { "Content-Type": "application/json" }, data: todoUpdatable },
    options
  );
};

export const getUpdateTodoMutationOptions = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodo>>,
    TError,
    { todoId: number; data: TodoUpdatable },
    TContext
  >;
  request?: SecondParameter<typeof demoHttpClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { todoId: number; data: TodoUpdatable },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTodo>>,
    { todoId: number; data: TodoUpdatable }
  > = (props) => {
    const { todoId, data } = props ?? {};

    return updateTodo(todoId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTodoMutationResult = NonNullable<Awaited<ReturnType<typeof updateTodo>>>;
export type UpdateTodoMutationBody = TodoUpdatable;
export type UpdateTodoMutationError = ErrorType<Error>;

export const useUpdateTodo = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodo>>,
    TError,
    { todoId: number; data: TodoUpdatable },
    TContext
  >;
  request?: SecondParameter<typeof demoHttpClient>;
}) => {
  const mutationOptions = getUpdateTodoMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * delete todo
 */
export const deleteTodo = (todoId: number, options?: SecondParameter<typeof demoHttpClient>) => {
  return demoHttpClient<void>({ url: `/todo/${todoId}`, method: "delete" }, options);
};

export const getDeleteTodoMutationOptions = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError, { todoId: number }, TContext>;
  request?: SecondParameter<typeof demoHttpClient>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError, { todoId: number }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTodo>>, { todoId: number }> = (props) => {
    const { todoId } = props ?? {};

    return deleteTodo(todoId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTodoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodo>>>;

export type DeleteTodoMutationError = ErrorType<Error>;

export const useDeleteTodo = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError, { todoId: number }, TContext>;
  request?: SecondParameter<typeof demoHttpClient>;
}) => {
  const mutationOptions = getDeleteTodoMutationOptions(options);

  return useMutation(mutationOptions);
};
